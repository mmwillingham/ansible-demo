- name: Play 1
#  hosts: localhost
  hosts: all
  gather_facts: true
  become: true
  remote_user: mwilling
  force_handlers: false
# Roles
#   init a new one: mkdir ./roles; cd roles; ansible-galaxy role init testrole; cd ..
#   Then copy files
  roles:
    - role: testrole
      tags: role1

#   call play/import/include - test variable differences

  tasks:
    - name: Include role from a task - this stops the services
      tags: role2
      vars:
        testincluderole_service_state: started
        testincluderole_service:
          - httpd
          - chronyd
          - cups
      ansible.builtin.include_role:
        name: testincluderole
        apply:
          tags: role2

    - name: Import role from a task
      tags: role3
      ansible.builtin.import_role:
        name: testrole

    - name: Output results of "{{ service }}"
      tags: role3
      ansible.builtin.debug:
        var: testrole_service

    - name: Display facts
      ansible.builtin.debug:
        # var: ansible_facts
        msg: Uncomment above line to display facts

# When
    - name: Check memory
      when: ansible_facts['memtotal_mb'] > 0
      ansible.builtin.debug:
        msg: You have some memory

#    - name: Gather service facts
#      ansible.builtin.service_facts:
#
#    - name: Display service facts
#      ansible.builtin.debug:
#        var: ansible_facts.services
# Loop
    - name: Ensure services are started
      notify: Restart httpd
      vars:
        service:
          - httpd
          - chronyd
          - cups
      loop: "{{ service }}"
      ansible.builtin.service:
        name: "{{ item }}"
        # name: httpd
        state: started
# Block rescue Group and Users
    - name: Block and rescue
      tags: users
      block:
        - name: Add group
          ansible.builtin.group:
            name: admin
            state: present
            
        - name: Add group to sudoers
          ansible.builtin.lineinfile:
            path: /etc/sudoers.d/admin
            state: present
            create: true
            mode: 0400
            line: '%admin ALL=(ALL) NOPASSWD: ALL'
            validate: /usr/bin/visudo -cf %s
# Loop multivalue and vault password
        - name: Display valus of pwhash
          ansible.builtin.debug:
            var: pwhash
        - name: Add two users
          vars:
          # I had to install passlib for the password_hash to work: pip install passlib
          # I don't want to add it to EE, so I'm running locally:
          # ansible-playbook demo.yml --vault-password-file=./vault-pass
          # To avoid having to specify password file, I can add  it to ansible.cfg: vault_password_file = ./.vault-pass
          # variable is set to pwhash: mypassword123! and stored in ./group_vars/all/password.yml
          # The password to open is redhat123!
          # To run and have it ask for password to vault: $ ansible-navigator -m stdout run demo.yml --pae false --vault-id @prompt
          # I also stored the password in ./vault-pass. This allows running without the prompt.
          # echo 'redhat123!' > ./vault-pass; chmod 0600 ./vault-pass
          # ansible-navigator -m stdout run demo.yml --vault-password-file=./vault-pass
            users:
              - username: bolauder
                group: admin
              - username: mmw
                group: admin
          loop: "{{ users }}"
          ansible.builtin.user:
            name: "{{ item.username }}"
            groups: "{{ item.group }}"
            password: "{{ pwhash | password_hash('sha512') }}"
            update_password: on_create
            state: present

      rescue:
        - name: Send a failure message
          ansible.builtin.debug:
            msg: "Group / User failed"

# Register and print (and cat a file)
    - name: Cat a file
      register: cat_output
      changed_when: false
      ansible.builtin.command: "cat /etc/hosts"

    - name: Display the cat results
      changed_when: false
      ansible.builtin.debug:
        var: cat_output.stdout_lines

# Vault (see above)
# import task
# When OR
    - name: When OR
      tags:
        - when
      when: (ansible_facts['distribution'] == "Fedora") or
            (ansible_facts['os_family'] == "RedHat")
      ansible.builtin.debug:
        # var: ansible_facts['distribution']
        msg: "distribution is {{ ansible_facts['distribution'] }} and os_family is {{ ansible_facts['os_family'] }}"

# When AND
    - name: When AND
      tags:
        - when
      when:  # You can also use the word and, like or is used above
        - ansible_facts['distribution'] == "Fedora"
        - ansible_facts['os_family'] == "RedHat"
      ansible.builtin.debug:
        # var: ansible_facts['distribution']
        msg: "distribution is {{ ansible_facts['distribution'] }} and os_family is {{ ansible_facts['os_family'] }}"

# When contains
    - name: When is contains `names is contains('martin')`
      tags:
        - when
      vars:
        names:
          - martin
          - bo
      when: "'martin' in names" # could also use "names is contains ('martin')"
      ansible.builtin.debug:
        # var: ansible_facts['distribution']
        msg: "names contains martin"

# When not in (This task should be skipped.)
    - name: When not in    # This will be skipped because os_family is RedHat
      tags:
        - when
      when: "'Red' not in ansible_facts['os_family']"
      ansible.builtin.debug:
        # var: ansible_facts['distribution']
        msg: "os_family is {{ ansible_facts['os_family'] }}"

# Difference in shell and command
    - name: Create motd
      tags:
        - command
      ansible.builtin.copy:
        content: "Hello Martin. This is your message of the day."
        dest: /etc/motd
        owner: root
        group: root
        mode: "0644"

    - name: Command - simple
      tags:
        - command
      register: motd
      changed_when: false
      ansible.builtin.command: cat /etc/motd

    - name: Command - ls -lart /tmp/tmp2
      tags:
        - command
      changed_when: false
      register: ls_l_tmp
      ansible.builtin.command: ls -lart /tmp/tmp2

    - name: Command - ls -lart /tmp/tmp2 separate lines
      tags:
        - command
      changed_when: false
      register: ls_l_tmp_newline
      ansible.builtin.command:
        cmd: ls -lart /tmp/tmp2

    - name: Command - ls -lart /tmp/tmp2 argv
      tags:
        - command
      changed_when: false
      register: ls_l_tmp_argv
      ansible.builtin.command:
        argv:
          - ls
          - -lart
          - /tmp/tmp2

    - name: Display command results
      tags:
        - command
      ansible.builtin.debug:
        msg: "motd: {{ motd.stdout_lines }} and {{ ls_l_tmp.stdout_lines }} #MMW# {{ ls_l_tmp_newline.stdout_lines }} #MMW# {{ ls_l_tmp_argv.stdout_lines }}"

    - name: Shell command
      tags: command
      register: shell_motd
      changed_when: false
#      ansible.builtin.shell:
#        cmd: cat /etc/motd | grep -i "Hello"   # This works, but gives a lint warning.
      args:
        executable: /bin/bash
      ansible.builtin.shell: |
        set -o pipefail
        cat /etc/motd | grep -h Hello

    - name: Display shell results
      tags: command
      ansible.builtin.debug:
        var: "{{ shell_motd.stdout }}"

# firewalld multiple services
    - name: Firewall block
      tags: firewall
      block:
        - name: Start firewall service
          ansible.builtin.service:
            name: firewalld
            state: started

        - name: Firewall with single service
          ansible.posix.firewalld:
            service: http
            state: enabled
            permanent: false
            immediate: false

        - name: Firewall with multiple services
          vars:
            service:
              - http
              - https
              - ssh
          loop: "{{ service }}"
          ansible.posix.firewalld:
            service: "{{ item }}"
            state: enabled
            permanent: false
            immediate: false

        - name: Stop firewall service
          ansible.builtin.service:
            name: firewalld
            state: stopped
      rescue:
        - name: Rescue of firewall block
          ansible.builtin.debug:
            msg: Rescue of firewall block

# jinja2 with template
    - name: Jinja2 template block
      tags: j2
      block:
        - name: Cat motd_j2
          changed_when: false
          register: cat_motd_j2
          ansible.builtin.command: cat /home/mwilling/git/ansible-demo/demo/motd.j2

        - name: Display motd_j2
          ansible.builtin.debug:
            var: cat_motd_j2.stdout_lines

        - name: Create motd from jinja2
          register: motd
          ansible.builtin.template:
            src: motd.j2
            dest: /etc/motd
            owner: root
            group: root
            mode: "0644"

        - name: Cat motd
          register: motd
          changed_when: false
          ansible.builtin.command: cat /etc/motd

        - name: Display motd
          ansible.builtin.debug:
            var: motd.stdout_lines

# lineinfile
        - name: Lineinfile add
          ansible.builtin.lineinfile:
            path: /etc/motd
            line: "Adding a new line"

        - name: Cat motd after new lines
          register: motd_lineinfile
          changed_when: false
          ansible.builtin.command: cat /etc/motd

        - name: Display motd after new lines
          ansible.builtin.debug:
            var: motd_lineinfile.stdout_lines

        - name: Lineinfile replace
          ansible.builtin.lineinfile:
            path: /etc/motd
            regex: "Adding a"                               # Notice it doesn't have to match the entire line
            line: "Replacing the new line with this one."

        - name: Cat motd after new lines
          register: motd_replace
          changed_when: false
          ansible.builtin.command: cat /etc/motd

        - name: Display motd after new lines
          ansible.builtin.debug:
            var: motd_replace.stdout_lines
      rescue:
        - name: Rescue of jinja block
          ansible.builtin.debug:
            msg: Rescue of jinja block

# handlers
  handlers:
    - name: Restart httpd
      ansible.builtin.service:
        name: httpd
        state: restarted

# Play 2 - rhel_system_roles
- name: Play 2 - rhel_system_roles
  hosts: all
  become: true
  vars:
#    network_connections:
#      - name: eth0
#        type: ethernet
#        ip:
#          address:
#            - 192.0.2.3/24

    network_state:
      dns-resolver:
        config:
          server:
            - 1.1.1.3
            - 1.0.0.3

#  pre_tasks:
#    - name: Pre Task 1

  roles:
    - role: redhat.rhel_system_roles.network
      tags: system
        
#  post_tasks:
#    - name: Post Task 1

#   Requirements file
# Storage
# Network
# Prerequisites for system roles
  # First install these public roles with:
  #  ansible-galaxy collection install redhat.rhel_system_roles
  #     OR
  #  https://console.redhat.com/ansible/automation-hub/repo/published/redhat/rhel_system_roles/docs/
  #     OR
  #  Download latest version here: https://console.redhat.com/ansible/automation-hub/repo/published/redhat/rhel_system_roles/
  #  ansible-galaxy collection install ~/Downloads/redhat-rhel_system_roles-1.95.7.tar.gz
  #  This will install in /home/mwilling/.ansible/collections/ansible_collections/redhat/rhel_system_roles

