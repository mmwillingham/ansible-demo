- name: Play 1
#  hosts: localhost
  hosts: all
  gather_facts: true
  become: true
  remote_user: mwilling
  force_handlers: false
# Roles
#   init a new one: mkdir ./roles; cd roles; ansible-galaxy role init testrole; cd ..
#   Then copy files
  roles:
    - role: testrole
      tags: role1

#   call play/import/include - test variable differences

  tasks:
    - name: Include role from a task
      tags: role2
      ansible.builtin.include_role:
        name: testrole

    - name: Output results of "{{ service }}"
      tags: role2
      ansible.builtin.debug:
        var: service

    - name: Import role from a task
      tags: role3
      ansible.builtin.import_role:
        name: testrole

    - name: Output results of "{{ service }}"
      tags: role3
      ansible.builtin.debug:
        var: service

    - name: Display facts
      ansible.builtin.debug:
        #var: ansible_facts
        msg: Uncomment above line to display facts

# When
    - name: Check memory
      when: ansible_facts['memtotal_mb'] > 0
      ansible.builtin.debug:
        msg: You have some memory

#    - name: Gather service facts
#      ansible.builtin.service_facts:
#
#    - name: Display service facts
#      ansible.builtin.debug:
#        var: ansible_facts.services
# Loop
    - name: Ensure services are started
      notify: Restart httpd
      vars:
        service:
          - httpd.service
          - chronyd
          - cups
      loop: "{{ service }}"
      ansible.builtin.service:
        name: "{{ item }}"
        #name: httpd
        state: started
# Block rescue Group and Users
    - name: Block and rescue
      block:
        - name: Add group
          ansible.builtin.group:
            name: admin
            state: present
# Loop multivalue and vault password
        - name: Display valus of pwhash
          ansible.builtin.debug:
            var: pwhash
        - name: Add two users
          vars:
          # I had to install passlib for the password_hash to work: pip install passlib
          # I don't want to add it to EE, so I'm running locally:
          # ansible-playbook demo.yml --vault-password-file=./vault-pass
          # To avoid having to specify password file, I can add  it to ansible.cfg: vault_password_file = ./.vault-pass
          # variable is set to pwhash: mypassword123! and stored in ./group_vars/all/password.yml
          # The password to open is redhat123!
          # To run and have it ask for password to vault: $ ansible-navigator -m stdout run demo.yml --pae false --vault-id @prompt
          # I also stored the password in ./vault-pass. This allows running without the prompt. 
          # echo 'redhat123!' > ./vault-pass; chmod 0600 ./vault-pass
          # ansible-navigator -m stdout run demo.yml --vault-password-file=./vault-pass
            users:
              - username: bolauder
                group: admin
              - username: mmw
                group: admin
          loop: "{{ users }}"
          ansible.builtin.user:
            name: "{{ item.username }}"
            groups: "{{ item.group }}"
            password: "{{ pwhash | password_hash('sha512') }}"
            #update_password: on_create
            update_password: always
            state: present
      rescue:
        - name: Send a failure message
          ansible.builtin.debug:
            msg: "Group / User failed"

# Register and print (and cat a file)
    - name: Cat a file
      register: cat_output
      ansible.builtin.command: "cat /etc/hosts"

    - name: Display the cat results
      ansible.builtin.debug:
        var: cat_output.stdout_lines

# Vault (see above)
# import task
# When OR
    - name: When OR
      tags:
        - when
      when: (ansible_facts['distribution'] == "Fedora") or
            (ansible_facts['os_family'] == "RedHat")
      ansible.builtin.debug:
        #var: ansible_facts['distribution']
        msg: "distribution is {{ ansible_facts['distribution'] }} and os_family is {{ ansible_facts['os_family'] }}"

# When AND
    - name: When AND
      tags:
        - when
      when:  # You can also use the word and, like or is used above
        - ansible_facts['distribution'] == "Fedora"
        - ansible_facts['os_family'] == "RedHat"
      ansible.builtin.debug:
        #var: ansible_facts['distribution']
        msg: "distribution is {{ ansible_facts['distribution'] }} and os_family is {{ ansible_facts['os_family'] }}"

# When contains
    - name: When is contains
      tags:
        - when
      vars:
        names:
          - martin
          - bo
      when: "names is contains ('martin')"     # could also use: "'martin' in names"
      ansible.builtin.debug:
        #var: ansible_facts['distribution']
        msg: "names contains martin"

# When not in
    - name: When not in    # This will be skipped because os_family is RedHat
      tags:
        - when
      when: "'Red' not in ansible_facts['os_family']"
      ansible.builtin.debug:
        #var: ansible_facts['distribution']
        msg: "os_family is {{ ansible_facts['os_family'] }}"

# Difference in shell and command
    - name: Create motd
      tags:
        - command
      ansible.builtin.copy:
        content: "Hello Martin. This is your message of the day."
        dest: /etc/motd

    - name: Command - simple
      tags:
        - command
      register: motd
      ansible.builtin.command: cat /etc/motd

    - name: Command - ls -lart /tmp/tmp2
      tags:
        - command
      register: ls_l_tmp
      ansible.builtin.command: ls -lart /tmp/tmp2

    - name: Command - ls -lart /tmp/tmp2 separate lines
      tags:
        - command
      register: ls_l_tmp_newline
      ansible.builtin.command:
        cmd: ls -lart /tmp/tmp2

    - name: Command - ls -lart /tmp/tmp2 argv
      tags:
        - command
      register: ls_l_tmp_argv
      ansible.builtin.command:
        argv:
          - ls
          - -lart
          - /tmp/tmp2

    - name: Display command results
      tags:
        - command
      ansible.builtin.debug:
        msg: "motd: {{ motd.stdout_lines }} and {{ ls_l_tmp.stdout_lines }} ################ {{ ls_l_tmp_newline.stdout_lines }} #@#@#@E# {{ ls_l_tmp_argv.stdout_lines }}"

    - name: Shell command
      tags: command
      register: shell_motd
      ansible.builtin.shell:
        cmd: cat /etc/motd | grep -i Hello
        
    - name: Display shell results
      tags: command
      ansible.builtin.debug:
        var: "{{ shell_motd.stdout }}"

# firewalld multiple services
    - name: firewall block
      tags: firewall
      block:
      - name: Start firewall service
        ansible.builtin.service:
          name: firewalld
          state: started

      - name: Firewall with single service
        ansible.posix.firewalld:
          service: http
          state: enabled
          permanent: false
          immediate: false

      - name: Firewall with multiple services
        vars:
          service:
            - http
            - https
            - ssh
        loop: "{{ service }}"
        ansible.posix.firewalld:
          service: "{{ item }}"
          state: enabled
          permanent: false
          immediate: false

      - name: Stop firewall service
        ansible.builtin.service:
          name: firewalld
          state: stopped

# jinja2 with template
    - name: Jinja2 template block
      tags: j2
      block:
      - name: Cat motd_j2
        register: cat_motd_j2
        ansible.builtin.command: cat /home/mwilling/ansible/motd.j2

      - name: Display motd_j2
        ansible.builtin.debug:
          var: cat_motd_j2.stdout_lines

      - name: Create motd from jinja2
        register: motd
        ansible.builtin.template:
          src: motd.j2
          dest: /etc/motd
          owner: root
          group: root
          mode: 0644

      - name: Cat motd
        register: motd
        ansible.builtin.command: cat /etc/motd

      - name: Display motd
        ansible.builtin.debug:
          var: motd.stdout_lines

# lineinfile
      - name: Lineinfile add
        ansible.builtin.lineinfile:
          path: /etc/motd
          line: "Adding a new line"

      - name: Cat motd after new lines
        register: motd_lineinfile
        ansible.builtin.command: cat /etc/motd

      - name: Display motd after new lines
        ansible.builtin.debug:
          var: motd_lineinfile.stdout_lines

      - name: Lineinfile replace
        ansible.builtin.lineinfile:
          path: /etc/motd
          regex: "Adding a"                               # Notice it doesn't have to match the entire line
          line: "Replacing the new line with this one."

      - name: Cat motd after new lines
        register: motd_replace
        ansible.builtin.command: cat /etc/motd

      - name: Display motd after new lines
        ansible.builtin.debug:
          var: motd_replace.stdout_lines

#   install public (redhat.rhel_system_roles)
#   pre_tasks and post_tasks
#   Requirements file
# Storage
# Network
# handlers
  handlers:
    - name: Restart httpd
      ansible.builtin.service:
        name: httpd
        state: restarted
